// Exercício 5 - Alfabeto

#include <TimerOne.h>

#define latchPin       4        // conectado ao pino 12 do 74HC595 (latch)
#define clockPin       6        // conectado ao pino 11 do 74HC595 (clock)
#define dataPin        8        // conectado ao pino 14 do 74HC595 (data)

byte frame = 0;                 // variável para armazenar o quadro atual sendo exibido

const unsigned int Alphabets[][8] = {

    0x00, 0x3F, 0x7F, 0xE4, 0xE4, 0x7F, 0x3F, 0x00, //A

    0x00, 0xFF, 0xFF, 0x99, 0x99, 0xFF, 0x66, 0x00, //B

    0x00, 0x3C, 0x7E, 0xC3, 0x81, 0xC3, 0x42, 0x00, //C

    0x00, 0xFF, 0xFF, 0xC3, 0xC3, 0x7E, 0x3C, 0x00, //D

    0x00, 0xFF, 0xFF, 0x99, 0x99, 0x99, 0x81, 0x00, //E

    0x00, 0xFF, 0xFF, 0xC8, 0xC8, 0xC8, 0xC0, 0x00, //F

    0x00, 0x7E, 0xFF, 0x81, 0x85, 0xC7, 0x46, 0x00, //G

    0x00, 0xFF, 0xFF, 0x18, 0x18, 0xFF, 0xFF, 0x00, //H

    0x00, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0x00, //I

    0x00, 0x06, 0xC6, 0xC3, 0xFF, 0xFE, 0xC0, 0x00, //J

    0x00, 0xFF, 0xFF, 0x38, 0x6C, 0xC6, 0x83, 0x00, //K

    0x00, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, 0x00, //L

    0xFF, 0xFF, 0x60, 0x30, 0x60, 0xFF, 0xFF, 0x00, //M

    0xFF, 0xFF, 0x60, 0x30, 0x18, 0xFF, 0xFF, 0x00, //N

    0x00, 0x7E, 0xFF, 0xC3, 0xC3, 0xFF, 0x7E, 0x00, //O

    0x00, 0xFF, 0xFF, 0x88, 0x88, 0xF8, 0x70, 0x00, //P

    0x00, 0x7C, 0xFE, 0x82, 0x86, 0xFF, 0x7D, 0x00, //Q

    0x00, 0xFF, 0xFF, 0xD8, 0xDC, 0xF7, 0x63, 0x00, //R

    0x00, 0x72, 0xFB, 0x99, 0x99, 0xDF, 0x4E, 0x00, //S

    0x00, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0x00, //T

    0x00, 0xFE, 0xFF, 0x03, 0x03, 0xFF, 0xFE, 0x00, //U

    0x00, 0xFC, 0xFE, 0x03, 0x03, 0xFE, 0xFC, 0x00, //V

    0xFF, 0xFF, 0x06, 0x0C, 0x06, 0xFF, 0xFF, 0x00, //W

    0xE7, 0xF7, 0x3C, 0x18, 0x3C, 0xEF, 0xE7, 0x00, //X

    0x00, 0xF0, 0xF8, 0x0F, 0x0F, 0xF8, 0xF0, 0x00, //Y

    0x00, 0xC7, 0xCF, 0xDB, 0xDB, 0xF3, 0xE3, 0x00 // Z

    };


void
setup()
{
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  Timer1.initialize(5000);
  Timer1.attachInterrupt(screenUpdate);
}

void
loop() 
{
  delay(800);
  frame++;
  if (frame > 25)                                               
    frame = 0;
  
}

void
screenUpdate()
{
  byte row = B10000000;            // linha 1
  for (byte k = 0; k < 8; k++)
  {
    shiftOut(dataPin, clockPin, LSBFIRST, Alphabets[frame][k]);            // array do LED (invertido)
    shiftOut(dataPin, clockPin, LSBFIRST, ~row);              // linha do número binário

    // borda de subida para emitir dados
    digitalWrite(latchPin, LOW);
    digitalWrite(latchPin, HIGH);
    row >>= 1;                          // deslocamento para a direita (row = row >> 1) 
  }

  // desliga todas as linhas até a próxima interrupção
  shiftOut(dataPin, clockPin, LSBFIRST, 0);
  shiftOut(dataPin, clockPin, LSBFIRST, ~0);
  
  // borda de subida para emitir dados
  digitalWrite(latchPin, LOW);
  digitalWrite(latchPin, HIGH); 
}
